{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{jwtDecode}from\"jwt-decode\";import Logout from\"../components/Logout\";import Login from\"./Login\";import{Link}from\"react-router-dom\";import{jsxs as _jsxs,jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";function LoginPage(){const[isLoggedIn,setIsLoggedIn]=useState(false);const onLogin=()=>{console.log(\"User logged in!\");setIsLoggedIn(true);// Example action after login\n};const[username,setUsername]=useState(null);// Check token on component mount\nuseEffect(()=>{const token=localStorage.getItem(\"authToken\");if(token){// Decode the token and extract the username\nconst decodedToken=jwtDecode(token);setUsername(decodedToken.username);// Assuming the username is stored in the token\n}else{setUsername(null);}},[]);return/*#__PURE__*/_jsx(\"div\",{children:username?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"Welcome, \",username]}),/*#__PURE__*/_jsx(Logout,{}),/*#__PURE__*/_jsx(Link,{to:\"/\",className:\"logout-go-back\",children:\"Back to main page.\"})]})// Display username if token is present\n:/*#__PURE__*/_jsx(Login,{})});}export default LoginPage;","map":{"version":3,"names":["React","useState","useEffect","jwtDecode","Logout","Login","Link","jsxs","_jsxs","jsx","_jsx","Fragment","_Fragment","LoginPage","isLoggedIn","setIsLoggedIn","onLogin","console","log","username","setUsername","token","localStorage","getItem","decodedToken","children","to","className"],"sources":["D:/Uni/SideStudies/myProject/frontend/src/pages/LoginPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\nimport Logout from \"../components/Logout\";\r\nimport Login from \"./Login\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction LoginPage() {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  const onLogin = () => {\r\n    console.log(\"User logged in!\");\r\n    setIsLoggedIn(true); // Example action after login\r\n  };\r\n\r\n  const [username, setUsername] = useState(null);\r\n\r\n  // Check token on component mount\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"authToken\");\r\n\r\n    if (token) {\r\n      // Decode the token and extract the username\r\n      const decodedToken = jwtDecode(token);\r\n      setUsername(decodedToken.username); // Assuming the username is stored in the token\r\n    } else {\r\n      setUsername(null);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {username ? (\r\n        <>\r\n          <h2>Welcome, {username}</h2>\r\n          <Logout />\r\n\r\n          <Link to=\"/\" className=\"logout-go-back\">\r\n            Back to main page.\r\n          </Link>\r\n        </> // Display username if token is present\r\n      ) : (\r\n        <Login></Login>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginPage;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,SAAS,KAAQ,YAAY,CACtC,MAAO,CAAAC,MAAM,KAAM,sBAAsB,CACzC,MAAO,CAAAC,KAAK,KAAM,SAAS,CAC3B,OAASC,IAAI,KAAQ,kBAAkB,CAAC,OAAAC,IAAA,IAAAC,KAAA,CAAAC,GAAA,IAAAC,IAAA,CAAAC,QAAA,IAAAC,SAAA,yBAExC,QAAS,CAAAC,SAASA,CAAA,CAAG,CACnB,KAAM,CAACC,UAAU,CAAEC,aAAa,CAAC,CAAGd,QAAQ,CAAC,KAAK,CAAC,CAEnD,KAAM,CAAAe,OAAO,CAAGA,CAAA,GAAM,CACpBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC,CAC9BH,aAAa,CAAC,IAAI,CAAC,CAAE;AACvB,CAAC,CAED,KAAM,CAACI,QAAQ,CAAEC,WAAW,CAAC,CAAGnB,QAAQ,CAAC,IAAI,CAAC,CAE9C;AACAC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAmB,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAE/C,GAAIF,KAAK,CAAE,CACT;AACA,KAAM,CAAAG,YAAY,CAAGrB,SAAS,CAACkB,KAAK,CAAC,CACrCD,WAAW,CAACI,YAAY,CAACL,QAAQ,CAAC,CAAE;AACtC,CAAC,IAAM,CACLC,WAAW,CAAC,IAAI,CAAC,CACnB,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,mBACEV,IAAA,QAAAe,QAAA,CACGN,QAAQ,cACPX,KAAA,CAAAI,SAAA,EAAAa,QAAA,eACEjB,KAAA,OAAAiB,QAAA,EAAI,WAAS,CAACN,QAAQ,EAAK,CAAC,cAC5BT,IAAA,CAACN,MAAM,GAAE,CAAC,cAEVM,IAAA,CAACJ,IAAI,EAACoB,EAAE,CAAC,GAAG,CAACC,SAAS,CAAC,gBAAgB,CAAAF,QAAA,CAAC,oBAExC,CAAM,CAAC,EACP,CAAE;AAAA,cAEJf,IAAA,CAACL,KAAK,GAAQ,CACf,CACE,CAAC,CAEV,CAEA,cAAe,CAAAQ,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}