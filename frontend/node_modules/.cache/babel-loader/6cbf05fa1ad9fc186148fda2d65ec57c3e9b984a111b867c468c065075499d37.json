{"ast":null,"code":"var _jsxFileName = \"D:\\\\Uni\\\\SideStudies\\\\myProject\\\\frontend\\\\src\\\\pages\\\\LoginPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jwtDecode } from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoginPage() {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const onLogin = () => {\n    console.log(\"User logged in!\");\n    setIsLoggedIn(true); // Example action after login\n  };\n  const [username, setUsername] = useState(null);\n\n  // Check token on component mount\n  useEffect(() => {\n    const token = localStorage.getItem(\"authToken\");\n    if (token) {\n      // Decode the token and extract the username\n      const decodedToken = jwtDecode(token);\n      setUsername(decodedToken.username); // Assuming the username is stored in the token\n    } else {\n      setUsername(null);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: isLoggedIn ? /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Welcome, \", username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this) // Display username if token is present\n    : /*#__PURE__*/_jsxDEV(\"li\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(LoginPage, \"fuQuQPBLa95HM13LXw9e6cqu448=\");\n_c = LoginPage;\nexport default LoginPage;\nvar _c;\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"names":["React","useState","useEffect","jwtDecode","jsxDEV","_jsxDEV","LoginPage","_s","isLoggedIn","setIsLoggedIn","onLogin","console","log","username","setUsername","token","localStorage","getItem","decodedToken","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Uni/SideStudies/myProject/frontend/src/pages/LoginPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { jwtDecode } from \"jwt-decode\";\r\n\r\nfunction LoginPage() {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n\r\n  const onLogin = () => {\r\n    console.log(\"User logged in!\");\r\n    setIsLoggedIn(true); // Example action after login\r\n  };\r\n\r\n  const [username, setUsername] = useState(null);\r\n\r\n  // Check token on component mount\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"authToken\");\r\n\r\n    if (token) {\r\n      // Decode the token and extract the username\r\n      const decodedToken = jwtDecode(token);\r\n      setUsername(decodedToken.username); // Assuming the username is stored in the token\r\n    } else {\r\n      setUsername(null);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {isLoggedIn ? (\r\n        <h1>Welcome, {username}</h1> // Display username if token is present\r\n      ) : (\r\n        <li>{/* Show login link if no token */}</li>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LoginPage;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAEnD,MAAMS,OAAO,GAAGA,CAAA,KAAM;IACpBC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC9BH,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;EACvB,CAAC;EAED,MAAM,CAACI,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAE9C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMa,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAE/C,IAAIF,KAAK,EAAE;MACT;MACA,MAAMG,YAAY,GAAGf,SAAS,CAACY,KAAK,CAAC;MACrCD,WAAW,CAACI,YAAY,CAACL,QAAQ,CAAC,CAAC,CAAC;IACtC,CAAC,MAAM;MACLC,WAAW,CAAC,IAAI,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACET,OAAA;IAAAc,QAAA,EACGX,UAAU,gBACTH,OAAA;MAAAc,QAAA,GAAI,WAAS,EAACN,QAAQ;IAAA;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC;IAAA,eAE7BlB,OAAA;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA2C;EAC5C;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAChB,EAAA,CAhCQD,SAAS;AAAAkB,EAAA,GAATlB,SAAS;AAkClB,eAAeA,SAAS;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}