{"ast":null,"code":"var _jsxFileName = \"D:\\\\Uni\\\\SideStudies\\\\myProject\\\\frontend\\\\src\\\\pages\\\\Home.js\",\n  _s = $RefreshSig$();\nimport React, { Component, useState, useEffect } from \"react\";\nimport Greeting from \"../components/Greeting\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home() {\n  _s();\n  const [username, setUsername] = useState(null);\n\n  // Check token on component mount\n  useEffect(() => {\n    const token = localStorage.getItem(\"authToken\");\n    if (token) {\n      // Decode the token and extract the username\n      const decodedToken = jwtDecode(token);\n      setUsername(decodedToken.username); // Assuming the username is stored in the token\n    } else {\n      setUsername(null);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Greeting, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"Tll88kuSsLVx4FtakfCyQkhtKNU=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","Component","useState","useEffect","Greeting","jsxDEV","_jsxDEV","Home","_s","username","setUsername","token","localStorage","getItem","decodedToken","jwtDecode","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Uni/SideStudies/myProject/frontend/src/pages/Home.js"],"sourcesContent":["import React, { Component, useState, useEffect } from \"react\";\r\n\r\nimport Greeting from \"../components/Greeting\";\r\n\r\nexport default function Home() {\r\n  const [username, setUsername] = useState(null);\r\n\r\n  // Check token on component mount\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"authToken\");\r\n\r\n    if (token) {\r\n      // Decode the token and extract the username\r\n      const decodedToken = jwtDecode(token);\r\n      setUsername(decodedToken.username); // Assuming the username is stored in the token\r\n    } else {\r\n      setUsername(null);\r\n    }\r\n  }, []);\r\n  return (\r\n    <div>\r\n      <Greeting />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE7D,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,eAAe,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;;EAE9C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMQ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAE/C,IAAIF,KAAK,EAAE;MACT;MACA,MAAMG,YAAY,GAAGC,SAAS,CAACJ,KAAK,CAAC;MACrCD,WAAW,CAACI,YAAY,CAACL,QAAQ,CAAC,CAAC,CAAC;IACtC,CAAC,MAAM;MACLC,WAAW,CAAC,IAAI,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC;EACN,oBACEJ,OAAA;IAAAU,QAAA,eACEV,OAAA,CAACF,QAAQ;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACT,CAAC;AAEV;AAACZ,EAAA,CApBuBD,IAAI;AAAAc,EAAA,GAAJd,IAAI;AAAA,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}